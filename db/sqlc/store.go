package db

import (
	"context"
	"database/sql"
	"fmt"
)

// Store provides all functions to execute db queries and transactions
type Store struct {
	*Queries         // explained in readme
	db       *sql.DB // to create new db tx
}

// NewStore creates a new store
func NewStore(db *sql.DB) *Store {
	return &Store{
		Queries: New(db), // generated by sqlc
		db:      db,
	}
}

// its a private func, ExecTx executes a function within a database transaction.
// It rolls back the transaction if the function returns an error.
func (store *Store) execTx(ctx context.Context, fn func(*Queries) error) error {
	// BeginTx starts a transaction.
	// The provided context is used until the transaction is committed or rolled back.
	// If the context is canceled, the sql package will roll back
	// the transaction.
	tx, err := store.db.BeginTx(ctx, nil) // create new db tx
	if err != nil {
		return fmt.Errorf("begin tx: %v", err)
	}

	// Get new queries object from created tx
	queries := New(tx)

	// execute the function
	err = fn(queries)
	if err != nil {
		if rbErr := tx.Rollback(); rbErr != nil { // rollback if error
			return fmt.Errorf("tx err: %v, rb err: %v", err, rbErr)
		}
		return err
	}

	// If all the operations are successful, commit the transaction
	return tx.Commit()
}

// TransferTxParams contains the input parameters of the transfer transaction
type TransferTxParams struct {
	FromAccountID int64 `json:"from_account_id"`
	ToAccountID   int64 `json:"to_account_id"`
	Amount        int64 `json:"amount"`
}

// TransferTxResult is the result of the transfer transaction
type TransferTxResult struct {
	Transfer    Transfer `json:"transfer"`
	FromAccount Account  `json:"from_account"`
	ToAccount   Account  `json:"to_account"`
	FromEntry   Entry    `json:"from_entry"`
	ToEntry     Entry    `json:"to_entry"`
}

// TransferTx performs a money transfer from one account to the other account.
// It creates a transfer record, add account entries, and update accounts' balance within a single database transaction.
// If any of the operations fail, it will rollback the transaction and return an error.
func (store *Store) TransferTx(ctx context.Context, arg TransferTxParams) (TransferTxResult, error) {
	var result TransferTxResult

	// we are accessing the ressult var of the outer func, from inside this (func(q *Queries))callback func,
	// similar for the arg variable, this maked the callback func become the closure.
	// since go lacks the support for generics type. Closure is often used when we want to get the result
	// from a callback func. becoz the callback func itself doesn't know the exact type of the result, it should return.
	err := store.execTx(ctx, func(q *Queries) error { // execute the transaction
		var err error
		result.Transfer, err = q.CreateTransfer(ctx, CreateTransferParams{
			FromAccountID: arg.FromAccountID,
			ToAccountID:   arg.ToAccountID,
			Amount:        arg.Amount,
		}) // create transfer
		if err != nil {
			return err
		}

		// add account entries, fromAcc and toAcc are the updated accounts
		result.FromEntry, err = q.CreateEntry(ctx, CreateEntryParams{
			AccountID: arg.FromAccountID,
			Amount:    -arg.Amount,
		}) // create entry
		if err != nil {
			return err
		}

		result.ToEntry, err = q.CreateEntry(ctx, CreateEntryParams{
			AccountID: arg.FromAccountID,
			Amount:    +arg.Amount,
		}) // create entry
		if err != nil {
			return err
		}

		// to update the account balance, we need to get the updated account from the db

		return nil
	})

	return result, err
}
